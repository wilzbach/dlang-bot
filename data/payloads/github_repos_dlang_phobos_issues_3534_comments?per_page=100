[
  {
    "url": "https://api.github.com/repos/dlang/phobos/issues/comments/129329996",
    "html_url": "https://github.com/dlang/phobos/pull/3534#issuecomment-129329996",
    "issue_url": "https://api.github.com/repos/dlang/phobos/issues/3534",
    "id": 129329996,
    "user": {
      "login": "DmitryOlshansky",
      "id": 281770,
      "avatar_url": "https://avatars1.githubusercontent.com/u/281770?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DmitryOlshansky",
      "html_url": "https://github.com/DmitryOlshansky",
      "followers_url": "https://api.github.com/users/DmitryOlshansky/followers",
      "following_url": "https://api.github.com/users/DmitryOlshansky/following{/other_user}",
      "gists_url": "https://api.github.com/users/DmitryOlshansky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DmitryOlshansky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DmitryOlshansky/subscriptions",
      "organizations_url": "https://api.github.com/users/DmitryOlshansky/orgs",
      "repos_url": "https://api.github.com/users/DmitryOlshansky/repos",
      "events_url": "https://api.github.com/users/DmitryOlshansky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DmitryOlshansky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-10T06:57:48Z",
    "updated_at": "2015-08-10T06:57:48Z",
    "body": "> O(2)\n\nHilarious. It's sill O(1), the number just means it's `some constant factor times 1` so it doesn't matter if this number is 1, 2, 1000 since multiplier in front of it is unspecified.\n"
  },
  {
    "url": "https://api.github.com/repos/dlang/phobos/issues/comments/129332006",
    "html_url": "https://github.com/dlang/phobos/pull/3534#issuecomment-129332006",
    "issue_url": "https://api.github.com/repos/dlang/phobos/issues/3534",
    "id": 129332006,
    "user": {
      "login": "DmitryOlshansky",
      "id": 281770,
      "avatar_url": "https://avatars1.githubusercontent.com/u/281770?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DmitryOlshansky",
      "html_url": "https://github.com/DmitryOlshansky",
      "followers_url": "https://api.github.com/users/DmitryOlshansky/followers",
      "following_url": "https://api.github.com/users/DmitryOlshansky/following{/other_user}",
      "gists_url": "https://api.github.com/users/DmitryOlshansky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DmitryOlshansky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DmitryOlshansky/subscriptions",
      "organizations_url": "https://api.github.com/users/DmitryOlshansky/orgs",
      "repos_url": "https://api.github.com/users/DmitryOlshansky/repos",
      "events_url": "https://api.github.com/users/DmitryOlshansky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DmitryOlshansky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-10T07:02:30Z",
    "updated_at": "2015-08-10T07:02:30Z",
    "body": "> std.range.primitives.isSortedRange\n\nI recall what the problem we had with it was - literally things like `SortedRange!(int[], binaryFun!\" a < b\")` and `SortedRange!(int[], (a,b) => a < b)` and `SortedRange!(int[], (b,c) => b < c)` are distinct types b/c respective predicates are not identical.\n\nIt doesn't block anything but should be taken into consideration, a compiler ought to try and match lambas with identical bodies at least token-wise identical.\n"
  },
  {
    "url": "https://api.github.com/repos/dlang/phobos/issues/comments/130734702",
    "html_url": "https://github.com/dlang/phobos/pull/3534#issuecomment-130734702",
    "issue_url": "https://api.github.com/repos/dlang/phobos/issues/3534",
    "id": 130734702,
    "user": {
      "login": "nordlow",
      "id": 829407,
      "avatar_url": "https://avatars2.githubusercontent.com/u/829407?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nordlow",
      "html_url": "https://github.com/nordlow",
      "followers_url": "https://api.github.com/users/nordlow/followers",
      "following_url": "https://api.github.com/users/nordlow/following{/other_user}",
      "gists_url": "https://api.github.com/users/nordlow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nordlow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nordlow/subscriptions",
      "organizations_url": "https://api.github.com/users/nordlow/orgs",
      "repos_url": "https://api.github.com/users/nordlow/repos",
      "events_url": "https://api.github.com/users/nordlow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nordlow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-13T15:47:35Z",
    "updated_at": "2015-08-13T15:47:35Z",
    "body": "> Hilarious. It's sill O(1)\n\nI kind of the new that ;)\n"
  },
  {
    "url": "https://api.github.com/repos/dlang/phobos/issues/comments/130736707",
    "html_url": "https://github.com/dlang/phobos/pull/3534#issuecomment-130736707",
    "issue_url": "https://api.github.com/repos/dlang/phobos/issues/3534",
    "id": 130736707,
    "user": {
      "login": "nordlow",
      "id": 829407,
      "avatar_url": "https://avatars2.githubusercontent.com/u/829407?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nordlow",
      "html_url": "https://github.com/nordlow",
      "followers_url": "https://api.github.com/users/nordlow/followers",
      "following_url": "https://api.github.com/users/nordlow/following{/other_user}",
      "gists_url": "https://api.github.com/users/nordlow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nordlow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nordlow/subscriptions",
      "organizations_url": "https://api.github.com/users/nordlow/orgs",
      "repos_url": "https://api.github.com/users/nordlow/repos",
      "events_url": "https://api.github.com/users/nordlow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nordlow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-13T15:55:11Z",
    "updated_at": "2015-08-17T09:03:57Z",
    "body": "1. Any suggestions on how to compare `pred` lambdas?\n\nFor instance\n\n``` D\nstatic assert(is(typeof(binaryFun!\"a<b\") ==\n                        typeof(binaryFun!\"a<b\")));\nstatic assert(is(typeof(binaryFun!\"a<b\") ==\n                        typeof(binaryFun!\"a < b\")));\n```\n\nboth passes but\n\n``` D\nstatic assert(!is(typeof(binaryFun!\"a<b\") ==\n                         typeof(binaryFun!\"a>b\")));\n```\n\nfails. What to do about this?...should we extract and reuse the CT-parsing logic of `\"a < b\"` which I presume is happening in `std.functional`?\n\n> It doesn't block anything but should be taken into consideration, a compiler ought to try and match lambas with identical bodies at least token-wise identical.\n\nIs this lambda-comparison just a wish or is there something that can be used already?\n1. Should `minElement`, `maxElement` and `minmaxElement` return a range instead? Or perhaps a `Nullable!ElementType!R`. The corresponding C++ algorithms all return iterators.\n2. Should we add a specialization for `reduce` aswell so that the user isn't force to use `minElement` to get these optimizations?\n"
  },
  {
    "url": "https://api.github.com/repos/dlang/phobos/issues/comments/136608429",
    "html_url": "https://github.com/dlang/phobos/pull/3534#issuecomment-136608429",
    "issue_url": "https://api.github.com/repos/dlang/phobos/issues/3534",
    "id": 136608429,
    "user": {
      "login": "JakobOvrum",
      "id": 155856,
      "avatar_url": "https://avatars1.githubusercontent.com/u/155856?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JakobOvrum",
      "html_url": "https://github.com/JakobOvrum",
      "followers_url": "https://api.github.com/users/JakobOvrum/followers",
      "following_url": "https://api.github.com/users/JakobOvrum/following{/other_user}",
      "gists_url": "https://api.github.com/users/JakobOvrum/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JakobOvrum/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JakobOvrum/subscriptions",
      "organizations_url": "https://api.github.com/users/JakobOvrum/orgs",
      "repos_url": "https://api.github.com/users/JakobOvrum/repos",
      "events_url": "https://api.github.com/users/JakobOvrum/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JakobOvrum/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-01T07:02:07Z",
    "updated_at": "2015-09-01T07:02:07Z",
    "body": "Functions that return subranges often already them as the same type as the whole range; this already works with `SortedRange`.\n\nComparing predicates has been discussed a lot before, particularly in the context of string lambdas. One such thread:\nhttp://forum.dlang.org/post/jnlqesrwxfekdsxjerlp@forum.dlang.org (Sorry, I have a hard time digging up the older ones)\n"
  },
  {
    "url": "https://api.github.com/repos/dlang/phobos/issues/comments/137459286",
    "html_url": "https://github.com/dlang/phobos/pull/3534#issuecomment-137459286",
    "issue_url": "https://api.github.com/repos/dlang/phobos/issues/3534",
    "id": 137459286,
    "user": {
      "login": "nordlow",
      "id": 829407,
      "avatar_url": "https://avatars2.githubusercontent.com/u/829407?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nordlow",
      "html_url": "https://github.com/nordlow",
      "followers_url": "https://api.github.com/users/nordlow/followers",
      "following_url": "https://api.github.com/users/nordlow/following{/other_user}",
      "gists_url": "https://api.github.com/users/nordlow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nordlow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nordlow/subscriptions",
      "organizations_url": "https://api.github.com/users/nordlow/orgs",
      "repos_url": "https://api.github.com/users/nordlow/repos",
      "events_url": "https://api.github.com/users/nordlow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nordlow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-03T14:01:13Z",
    "updated_at": "2015-09-03T14:01:13Z",
    "body": "@JakobOvrum I guess you're referring to `remove`, `strip` and `split`, right? Should we add some static asserts to those functions to verify that `SortedRange` is propagated correctly?\n"
  },
  {
    "url": "https://api.github.com/repos/dlang/phobos/issues/comments/141548223",
    "html_url": "https://github.com/dlang/phobos/pull/3534#issuecomment-141548223",
    "issue_url": "https://api.github.com/repos/dlang/phobos/issues/3534",
    "id": 141548223,
    "user": {
      "login": "JackStouffer",
      "id": 680068,
      "avatar_url": "https://avatars3.githubusercontent.com/u/680068?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JackStouffer",
      "html_url": "https://github.com/JackStouffer",
      "followers_url": "https://api.github.com/users/JackStouffer/followers",
      "following_url": "https://api.github.com/users/JackStouffer/following{/other_user}",
      "gists_url": "https://api.github.com/users/JackStouffer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JackStouffer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JackStouffer/subscriptions",
      "organizations_url": "https://api.github.com/users/JackStouffer/orgs",
      "repos_url": "https://api.github.com/users/JackStouffer/repos",
      "events_url": "https://api.github.com/users/JackStouffer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JackStouffer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-18T19:38:22Z",
    "updated_at": "2015-09-18T19:38:22Z",
    "body": "@nordlow if you ever solve the comparing predicates problem, `isPermutation` once had a `SortedRange` overload that could be added back in to make the operation `O(1)` by basically acting as an wrapper to `equal`, but it was dropped because the function could not determine if the two predicates for the `SortedRange`s were equal, and was therefore buggy.  \n"
  },
  {
    "url": "https://api.github.com/repos/dlang/phobos/issues/comments/141601914",
    "html_url": "https://github.com/dlang/phobos/pull/3534#issuecomment-141601914",
    "issue_url": "https://api.github.com/repos/dlang/phobos/issues/3534",
    "id": 141601914,
    "user": {
      "login": "JakobOvrum",
      "id": 155856,
      "avatar_url": "https://avatars1.githubusercontent.com/u/155856?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JakobOvrum",
      "html_url": "https://github.com/JakobOvrum",
      "followers_url": "https://api.github.com/users/JakobOvrum/followers",
      "following_url": "https://api.github.com/users/JakobOvrum/following{/other_user}",
      "gists_url": "https://api.github.com/users/JakobOvrum/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JakobOvrum/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JakobOvrum/subscriptions",
      "organizations_url": "https://api.github.com/users/JakobOvrum/orgs",
      "repos_url": "https://api.github.com/users/JakobOvrum/repos",
      "events_url": "https://api.github.com/users/JakobOvrum/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JakobOvrum/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-19T00:40:27Z",
    "updated_at": "2015-09-19T00:40:27Z",
    "body": "@nordlow, algorithms that return the input range type as-is in some capacity, of which there are quite a few, tend to guarantee this in the documentation (see `find`, `strip`, and even composite return types like `findSplit` and `retro`). This is an integral part of their interface, orthogonal to `SortedRange` in particular. It's behaviour you can rely on.\n\n---\n\nI don't think text-based predicate comparison is ever going to be a good thing, it's too fragile, even with whitespace normalisation. Non-string lambda functions are superior in every other way so it's natural for a developer to use those instead, especially as sorting predicates become more complex than the basic `\"a < b\"` form. If the programmer starts out with a simple string lambda then a few months down the line changes it to a non-trivial one - it could even just be a slightly different string lambda that they forgot to change in all relevant locations - it silently eludes the specialization and suddenly the algorithmic complexity of the program is potentially very different, without warning. I think predicate specialization should be robust, and if we can't make it robust, put the onus on the caller instead (which is the status quo).\n\nIn lieu of the ability to compare lambda functions, which I don't think anyone has come up with a good design proposal for yet, maybe we could devise a special scheme for sorting predicates in particular, recognizing that in real programs the typical ways they deviate from trivial comparisons is probably a small set. In the thread I linked previously someone suggested predefined predicates `less`, `greater` etc. Maybe something that builds on that, such as with function chaining; `\"a.foo < b.foo\"` could become `less.member(\"foo\")` or something. Grepping through dub packages could give us some data on what kind of predicates people use in the real world. Just an idea.\n\n---\n\nRegardless of whether or not I'm right about the above, I think you should move the `*Element` algorithms to a new PR where they can be evaluated separately.\n\n---\n\nAt any rate, I'm glad you came up with some many algorithms that could benefit from specialization of `SortedRange` inputs. Regardless of what happens these are good finds.\n"
  },
  {
    "url": "https://api.github.com/repos/dlang/phobos/issues/comments/160486425",
    "html_url": "https://github.com/dlang/phobos/pull/3534#issuecomment-160486425",
    "issue_url": "https://api.github.com/repos/dlang/phobos/issues/3534",
    "id": 160486425,
    "user": {
      "login": "JackStouffer",
      "id": 680068,
      "avatar_url": "https://avatars3.githubusercontent.com/u/680068?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JackStouffer",
      "html_url": "https://github.com/JackStouffer",
      "followers_url": "https://api.github.com/users/JackStouffer/followers",
      "following_url": "https://api.github.com/users/JackStouffer/following{/other_user}",
      "gists_url": "https://api.github.com/users/JackStouffer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JackStouffer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JackStouffer/subscriptions",
      "organizations_url": "https://api.github.com/users/JackStouffer/orgs",
      "repos_url": "https://api.github.com/users/JackStouffer/repos",
      "events_url": "https://api.github.com/users/JackStouffer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JackStouffer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-30T00:22:51Z",
    "updated_at": "2015-11-30T00:22:51Z",
    "body": "@nordlow any chance of moving some of the changes like JakobOvrum suggested? It would be cool to get these into the next release.\n"
  },
  {
    "url": "https://api.github.com/repos/dlang/phobos/issues/comments/169443082",
    "html_url": "https://github.com/dlang/phobos/pull/3534#issuecomment-169443082",
    "issue_url": "https://api.github.com/repos/dlang/phobos/issues/3534",
    "id": 169443082,
    "user": {
      "login": "quickfur",
      "id": 405446,
      "avatar_url": "https://avatars3.githubusercontent.com/u/405446?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/quickfur",
      "html_url": "https://github.com/quickfur",
      "followers_url": "https://api.github.com/users/quickfur/followers",
      "following_url": "https://api.github.com/users/quickfur/following{/other_user}",
      "gists_url": "https://api.github.com/users/quickfur/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/quickfur/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/quickfur/subscriptions",
      "organizations_url": "https://api.github.com/users/quickfur/orgs",
      "repos_url": "https://api.github.com/users/quickfur/repos",
      "events_url": "https://api.github.com/users/quickfur/events{/privacy}",
      "received_events_url": "https://api.github.com/users/quickfur/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-06T20:06:53Z",
    "updated_at": "2016-01-06T20:06:53Z",
    "body": "I suggest to break this PR up into smaller pieces so that it's easier to review, and the non-controversial parts can be merged first while we work on the other parts. Otherwise this will go very slowly and take too long to get merged.\n"
  },
  {
    "url": "https://api.github.com/repos/dlang/phobos/issues/comments/169443409",
    "html_url": "https://github.com/dlang/phobos/pull/3534#issuecomment-169443409",
    "issue_url": "https://api.github.com/repos/dlang/phobos/issues/3534",
    "id": 169443409,
    "user": {
      "login": "quickfur",
      "id": 405446,
      "avatar_url": "https://avatars3.githubusercontent.com/u/405446?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/quickfur",
      "html_url": "https://github.com/quickfur",
      "followers_url": "https://api.github.com/users/quickfur/followers",
      "following_url": "https://api.github.com/users/quickfur/following{/other_user}",
      "gists_url": "https://api.github.com/users/quickfur/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/quickfur/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/quickfur/subscriptions",
      "organizations_url": "https://api.github.com/users/quickfur/orgs",
      "repos_url": "https://api.github.com/users/quickfur/repos",
      "events_url": "https://api.github.com/users/quickfur/events{/privacy}",
      "received_events_url": "https://api.github.com/users/quickfur/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-06T20:07:36Z",
    "updated_at": "2016-01-06T20:07:36Z",
    "body": "As a start, I'd say do a separate PR per overload set, as a rough guideline. I think that's much easier to review, and safe to merge piecemeal.\n"
  },
  {
    "url": "https://api.github.com/repos/dlang/phobos/issues/comments/183031844",
    "html_url": "https://github.com/dlang/phobos/pull/3534#issuecomment-183031844",
    "issue_url": "https://api.github.com/repos/dlang/phobos/issues/3534",
    "id": 183031844,
    "user": {
      "login": "quickfur",
      "id": 405446,
      "avatar_url": "https://avatars3.githubusercontent.com/u/405446?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/quickfur",
      "html_url": "https://github.com/quickfur",
      "followers_url": "https://api.github.com/users/quickfur/followers",
      "following_url": "https://api.github.com/users/quickfur/following{/other_user}",
      "gists_url": "https://api.github.com/users/quickfur/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/quickfur/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/quickfur/subscriptions",
      "organizations_url": "https://api.github.com/users/quickfur/orgs",
      "repos_url": "https://api.github.com/users/quickfur/repos",
      "events_url": "https://api.github.com/users/quickfur/events{/privacy}",
      "received_events_url": "https://api.github.com/users/quickfur/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-11T19:43:41Z",
    "updated_at": "2016-02-11T19:43:41Z",
    "body": "ping @nordlow \nLet's move forward with this?\n"
  },
  {
    "url": "https://api.github.com/repos/dlang/phobos/issues/comments/190115876",
    "html_url": "https://github.com/dlang/phobos/pull/3534#issuecomment-190115876",
    "issue_url": "https://api.github.com/repos/dlang/phobos/issues/3534",
    "id": 190115876,
    "user": {
      "login": "nordlow",
      "id": 829407,
      "avatar_url": "https://avatars2.githubusercontent.com/u/829407?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nordlow",
      "html_url": "https://github.com/nordlow",
      "followers_url": "https://api.github.com/users/nordlow/followers",
      "following_url": "https://api.github.com/users/nordlow/following{/other_user}",
      "gists_url": "https://api.github.com/users/nordlow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nordlow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nordlow/subscriptions",
      "organizations_url": "https://api.github.com/users/nordlow/orgs",
      "repos_url": "https://api.github.com/users/nordlow/repos",
      "events_url": "https://api.github.com/users/nordlow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nordlow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-29T09:16:12Z",
    "updated_at": "2016-02-29T09:25:02Z",
    "body": "@quickfur Should I start with an initial pull for the new `std.range.primitives.isSortedRange` eventhough I have not not found an ideal way to detect which `pred` argument that was given as template argument to `isSortedRange`?\n\nOne way to move forward with this PR is to restrict logic to a specific set of expressions such as\n- `\"a < b\"`\n- `\"a > b\"`\n- `\"a <= b\"`\n- `\"a >= b\"`\n\nwhich should cover most uses. All other inputs should trigger a compile-time error with a nice descriptive message.\n"
  },
  {
    "url": "https://api.github.com/repos/dlang/phobos/issues/comments/190309684",
    "html_url": "https://github.com/dlang/phobos/pull/3534#issuecomment-190309684",
    "issue_url": "https://api.github.com/repos/dlang/phobos/issues/3534",
    "id": 190309684,
    "user": {
      "login": "quickfur",
      "id": 405446,
      "avatar_url": "https://avatars3.githubusercontent.com/u/405446?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/quickfur",
      "html_url": "https://github.com/quickfur",
      "followers_url": "https://api.github.com/users/quickfur/followers",
      "following_url": "https://api.github.com/users/quickfur/following{/other_user}",
      "gists_url": "https://api.github.com/users/quickfur/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/quickfur/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/quickfur/subscriptions",
      "organizations_url": "https://api.github.com/users/quickfur/orgs",
      "repos_url": "https://api.github.com/users/quickfur/repos",
      "events_url": "https://api.github.com/users/quickfur/events{/privacy}",
      "received_events_url": "https://api.github.com/users/quickfur/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-29T17:55:03Z",
    "updated_at": "2016-02-29T17:55:03Z",
    "body": "Hmm. On second thoughts, there is no good way to compare two lambdas (whether string or function literal -- the latter because the compiler has no implementation of such a comparison). So there is no good solution for moving this PR forward.\n\nThe problem is that comparing two arbitrary lambdas is, in the most general case, uncomputable. For most practical purposes, though, we can reduce the problem to something tractable by ignoring non-trivial equivalences such as `(a < b) == !(a >= b)`, and just looking at AST equivalence. Of course, that also needs some further restriction, since `a < b+x` may mean different things if `x` is bound to the surrounding context of the lambda, so if they are bound to two different contexts they should not compare as equal.\n\nBut in any case, this requires compiler support, and I agree with the sentiment that we should not promote string lambdas anymore so it's kinda pointless to support these functions just for string lambdas.  Let's wait until we have a DIP on how to implement lambda comparisons.\n"
  },
  {
    "url": "https://api.github.com/repos/dlang/phobos/issues/comments/190354953",
    "html_url": "https://github.com/dlang/phobos/pull/3534#issuecomment-190354953",
    "issue_url": "https://api.github.com/repos/dlang/phobos/issues/3534",
    "id": 190354953,
    "user": {
      "login": "MetaLang",
      "id": 4450317,
      "avatar_url": "https://avatars3.githubusercontent.com/u/4450317?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MetaLang",
      "html_url": "https://github.com/MetaLang",
      "followers_url": "https://api.github.com/users/MetaLang/followers",
      "following_url": "https://api.github.com/users/MetaLang/following{/other_user}",
      "gists_url": "https://api.github.com/users/MetaLang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MetaLang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MetaLang/subscriptions",
      "organizations_url": "https://api.github.com/users/MetaLang/orgs",
      "repos_url": "https://api.github.com/users/MetaLang/repos",
      "events_url": "https://api.github.com/users/MetaLang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MetaLang/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-29T19:54:31Z",
    "updated_at": "2016-02-29T19:54:31Z",
    "body": "> Of course, that also needs some further restriction, since a < b+x may mean different things if x is bound to the surrounding context of the lambda, so if they are bound to two different contexts they should not compare as equal.\n\nI'm not sure if you're saying that this is bad, but I'd consider that to be a pretty good thing.\n"
  },
  {
    "url": "https://api.github.com/repos/dlang/phobos/issues/comments/190365595",
    "html_url": "https://github.com/dlang/phobos/pull/3534#issuecomment-190365595",
    "issue_url": "https://api.github.com/repos/dlang/phobos/issues/3534",
    "id": 190365595,
    "user": {
      "login": "quickfur",
      "id": 405446,
      "avatar_url": "https://avatars3.githubusercontent.com/u/405446?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/quickfur",
      "html_url": "https://github.com/quickfur",
      "followers_url": "https://api.github.com/users/quickfur/followers",
      "following_url": "https://api.github.com/users/quickfur/following{/other_user}",
      "gists_url": "https://api.github.com/users/quickfur/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/quickfur/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/quickfur/subscriptions",
      "organizations_url": "https://api.github.com/users/quickfur/orgs",
      "repos_url": "https://api.github.com/users/quickfur/repos",
      "events_url": "https://api.github.com/users/quickfur/events{/privacy}",
      "received_events_url": "https://api.github.com/users/quickfur/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-29T20:16:12Z",
    "updated_at": "2016-02-29T20:16:49Z",
    "body": "I was just thinking aloud.  Obviously, it would be very bad if the two lambdas in the following code compared equal!\n\n```\nauto sortedRange1(int[] a)\n{\n    auto x = 1;\n    return a.sort!((a,b) => a < x*b);\n}\nauto sortedRange2(int[] a)\n{\n    auto x =  -1;\n    return a.sort!((a,b) => a < x*b);\n}\n```\n"
  },
  {
    "url": "https://api.github.com/repos/dlang/phobos/issues/comments/190755162",
    "html_url": "https://github.com/dlang/phobos/pull/3534#issuecomment-190755162",
    "issue_url": "https://api.github.com/repos/dlang/phobos/issues/3534",
    "id": 190755162,
    "user": {
      "login": "sigod",
      "id": 1175750,
      "avatar_url": "https://avatars2.githubusercontent.com/u/1175750?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sigod",
      "html_url": "https://github.com/sigod",
      "followers_url": "https://api.github.com/users/sigod/followers",
      "following_url": "https://api.github.com/users/sigod/following{/other_user}",
      "gists_url": "https://api.github.com/users/sigod/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sigod/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sigod/subscriptions",
      "organizations_url": "https://api.github.com/users/sigod/orgs",
      "repos_url": "https://api.github.com/users/sigod/repos",
      "events_url": "https://api.github.com/users/sigod/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sigod/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-01T14:54:12Z",
    "updated_at": "2016-03-01T14:54:12Z",
    "body": "I have a question: Why not to add specializations directly into `SortedRange`?\n"
  },
  {
    "url": "https://api.github.com/repos/dlang/phobos/issues/comments/190756913",
    "html_url": "https://github.com/dlang/phobos/pull/3534#issuecomment-190756913",
    "issue_url": "https://api.github.com/repos/dlang/phobos/issues/3534",
    "id": 190756913,
    "user": {
      "login": "nordlow",
      "id": 829407,
      "avatar_url": "https://avatars2.githubusercontent.com/u/829407?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nordlow",
      "html_url": "https://github.com/nordlow",
      "followers_url": "https://api.github.com/users/nordlow/followers",
      "following_url": "https://api.github.com/users/nordlow/following{/other_user}",
      "gists_url": "https://api.github.com/users/nordlow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nordlow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nordlow/subscriptions",
      "organizations_url": "https://api.github.com/users/nordlow/orgs",
      "repos_url": "https://api.github.com/users/nordlow/repos",
      "events_url": "https://api.github.com/users/nordlow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nordlow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-01T14:59:52Z",
    "updated_at": "2016-03-01T15:18:07Z",
    "body": "That might be cleaner, thanks to UFCS and because `isSortedRange` doesn't have to be imported.\n\nAFAIK: Lambda comparison problem will remain, though.\n"
  },
  {
    "url": "https://api.github.com/repos/dlang/phobos/issues/comments/190791715",
    "html_url": "https://github.com/dlang/phobos/pull/3534#issuecomment-190791715",
    "issue_url": "https://api.github.com/repos/dlang/phobos/issues/3534",
    "id": 190791715,
    "user": {
      "login": "quickfur",
      "id": 405446,
      "avatar_url": "https://avatars3.githubusercontent.com/u/405446?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/quickfur",
      "html_url": "https://github.com/quickfur",
      "followers_url": "https://api.github.com/users/quickfur/followers",
      "following_url": "https://api.github.com/users/quickfur/following{/other_user}",
      "gists_url": "https://api.github.com/users/quickfur/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/quickfur/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/quickfur/subscriptions",
      "organizations_url": "https://api.github.com/users/quickfur/orgs",
      "repos_url": "https://api.github.com/users/quickfur/repos",
      "events_url": "https://api.github.com/users/quickfur/events{/privacy}",
      "received_events_url": "https://api.github.com/users/quickfur/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-01T16:20:30Z",
    "updated_at": "2016-03-01T16:20:30Z",
    "body": "Actually, if the specializations are added as member functions of `SortedRange`, then we don't _need_ `isSortedRange` and lambda comparisons, because the member functions will have direct access to the sorting predicate and the range can safely be assumed to be sorted (since otherwise it wouldn't be a `SortedRange` to begin with).\n\nGiven the current state of things, that could potentially be the better way to go right now.\n"
  },
  {
    "url": "https://api.github.com/repos/dlang/phobos/issues/comments/190799859",
    "html_url": "https://github.com/dlang/phobos/pull/3534#issuecomment-190799859",
    "issue_url": "https://api.github.com/repos/dlang/phobos/issues/3534",
    "id": 190799859,
    "user": {
      "login": "nordlow",
      "id": 829407,
      "avatar_url": "https://avatars2.githubusercontent.com/u/829407?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nordlow",
      "html_url": "https://github.com/nordlow",
      "followers_url": "https://api.github.com/users/nordlow/followers",
      "following_url": "https://api.github.com/users/nordlow/following{/other_user}",
      "gists_url": "https://api.github.com/users/nordlow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nordlow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nordlow/subscriptions",
      "organizations_url": "https://api.github.com/users/nordlow/orgs",
      "repos_url": "https://api.github.com/users/nordlow/repos",
      "events_url": "https://api.github.com/users/nordlow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nordlow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-01T16:36:47Z",
    "updated_at": "2016-03-01T16:39:23Z",
    "body": "Ok, I'll look into it. \n\nI guess we should be begin with calls such as:\n- `sr.sort`\n- `sr.find(element)`\n- `sr.isSorted`\n- `sr.minPos`\n\nwhere `sr` is an instance of a `SortedRange`.\n\nI guess `find` doesn't need the `SearchPolicy´ argument then, right?\n\nAnymore low-hanging fruits?\n\nBut note that this, of course, only works for calls to `sort`, `isSorted`, `minPos` without explicit lambda-argument `pred`. But I guess that's ok, right?\n"
  },
  {
    "url": "https://api.github.com/repos/dlang/phobos/issues/comments/190805250",
    "html_url": "https://github.com/dlang/phobos/pull/3534#issuecomment-190805250",
    "issue_url": "https://api.github.com/repos/dlang/phobos/issues/3534",
    "id": 190805250,
    "user": {
      "login": "sigod",
      "id": 1175750,
      "avatar_url": "https://avatars2.githubusercontent.com/u/1175750?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sigod",
      "html_url": "https://github.com/sigod",
      "followers_url": "https://api.github.com/users/sigod/followers",
      "following_url": "https://api.github.com/users/sigod/following{/other_user}",
      "gists_url": "https://api.github.com/users/sigod/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sigod/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sigod/subscriptions",
      "organizations_url": "https://api.github.com/users/sigod/orgs",
      "repos_url": "https://api.github.com/users/sigod/repos",
      "events_url": "https://api.github.com/users/sigod/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sigod/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-01T16:45:12Z",
    "updated_at": "2016-03-01T16:45:12Z",
    "body": "> then we don't need ... lambda comparisons\n\nThere's slight problem. For example, if range were sorted with `\"a < b\"` and user wants to sort it again with `\"a > b\"`. Ideally it's just a call to `retro`.\n"
  },
  {
    "url": "https://api.github.com/repos/dlang/phobos/issues/comments/190810806",
    "html_url": "https://github.com/dlang/phobos/pull/3534#issuecomment-190810806",
    "issue_url": "https://api.github.com/repos/dlang/phobos/issues/3534",
    "id": 190810806,
    "user": {
      "login": "sigod",
      "id": 1175750,
      "avatar_url": "https://avatars2.githubusercontent.com/u/1175750?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sigod",
      "html_url": "https://github.com/sigod",
      "followers_url": "https://api.github.com/users/sigod/followers",
      "following_url": "https://api.github.com/users/sigod/following{/other_user}",
      "gists_url": "https://api.github.com/users/sigod/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sigod/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sigod/subscriptions",
      "organizations_url": "https://api.github.com/users/sigod/orgs",
      "repos_url": "https://api.github.com/users/sigod/repos",
      "events_url": "https://api.github.com/users/sigod/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sigod/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-01T16:56:35Z",
    "updated_at": "2016-03-01T16:56:35Z",
    "body": "> Anymore low-hanging fruits?\n\n`minCount`, probably.\n"
  },
  {
    "url": "https://api.github.com/repos/dlang/phobos/issues/comments/190838316",
    "html_url": "https://github.com/dlang/phobos/pull/3534#issuecomment-190838316",
    "issue_url": "https://api.github.com/repos/dlang/phobos/issues/3534",
    "id": 190838316,
    "user": {
      "login": "quickfur",
      "id": 405446,
      "avatar_url": "https://avatars3.githubusercontent.com/u/405446?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/quickfur",
      "html_url": "https://github.com/quickfur",
      "followers_url": "https://api.github.com/users/quickfur/followers",
      "following_url": "https://api.github.com/users/quickfur/following{/other_user}",
      "gists_url": "https://api.github.com/users/quickfur/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/quickfur/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/quickfur/subscriptions",
      "organizations_url": "https://api.github.com/users/quickfur/orgs",
      "repos_url": "https://api.github.com/users/quickfur/repos",
      "events_url": "https://api.github.com/users/quickfur/events{/privacy}",
      "received_events_url": "https://api.github.com/users/quickfur/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-01T18:13:08Z",
    "updated_at": "2016-03-01T18:13:08Z",
    "body": "@sigod  We can't possibly know about all these special cases.  It would be up to user code to detect such a case and use `retro` instead of `sort`.  (Of course, ideally, `sort` should be using an algorithm that behaves pretty closely to calling `retro` when the incoming range is sorted in reverse order.) But there's also the question of how common is it to need to call `sort` on a sorted range with the reverse predicate, to justify including this special case in the standard library.  If this is a rare use case, it doesn't justify the cost of additional complexity in `SortedRange`.\n\n(Not to mention that determining whether two predicates are the opposite of each other, generally speaking, is uncomputable. It's easy to detect built-in operators `<` and `>`, but what if the user type implements a non-trivial `opCmp`? What if `opCmp` is a partial order, rather than a total order? Etc.)\n"
  },
  {
    "url": "https://api.github.com/repos/dlang/phobos/issues/comments/190874075",
    "html_url": "https://github.com/dlang/phobos/pull/3534#issuecomment-190874075",
    "issue_url": "https://api.github.com/repos/dlang/phobos/issues/3534",
    "id": 190874075,
    "user": {
      "login": "sigod",
      "id": 1175750,
      "avatar_url": "https://avatars2.githubusercontent.com/u/1175750?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sigod",
      "html_url": "https://github.com/sigod",
      "followers_url": "https://api.github.com/users/sigod/followers",
      "following_url": "https://api.github.com/users/sigod/following{/other_user}",
      "gists_url": "https://api.github.com/users/sigod/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sigod/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sigod/subscriptions",
      "organizations_url": "https://api.github.com/users/sigod/orgs",
      "repos_url": "https://api.github.com/users/sigod/repos",
      "events_url": "https://api.github.com/users/sigod/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sigod/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-01T19:51:37Z",
    "updated_at": "2016-03-01T19:51:37Z",
    "body": "> (Not to mention that determining whether two predicates are the opposite of each other, generally speaking, is uncomputable. It's easy to detect built-in operators `<` and `>`, but what if the user type implements a non-trivial `opCmp`? What if `opCmp` is a partial order, rather than a total order? Etc.)\n\nThis didn't occurred to me. Then I think such detection is out of question.\n\n> But note that this, of course, only works for calls to `sort`, `isSorted`, `minPos` without explicit lambda-argument `pred`. But I guess that's ok, right?\n\nWe probably could easily add support for the same `pred` with which `SortedRange` were constructed.\n"
  },
  {
    "url": "https://api.github.com/repos/dlang/phobos/issues/comments/215667568",
    "html_url": "https://github.com/dlang/phobos/pull/3534#issuecomment-215667568",
    "issue_url": "https://api.github.com/repos/dlang/phobos/issues/3534",
    "id": 215667568,
    "user": {
      "login": "wilzbach",
      "id": 4370550,
      "avatar_url": "https://avatars0.githubusercontent.com/u/4370550?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wilzbach",
      "html_url": "https://github.com/wilzbach",
      "followers_url": "https://api.github.com/users/wilzbach/followers",
      "following_url": "https://api.github.com/users/wilzbach/following{/other_user}",
      "gists_url": "https://api.github.com/users/wilzbach/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wilzbach/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wilzbach/subscriptions",
      "organizations_url": "https://api.github.com/users/wilzbach/orgs",
      "repos_url": "https://api.github.com/users/wilzbach/repos",
      "events_url": "https://api.github.com/users/wilzbach/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wilzbach/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-29T09:25:35Z",
    "updated_at": "2016-04-29T09:25:35Z",
    "body": "@nordlow `{min,max}Element` are now in Phobos (crowd goes woohoo!). I actually didn't know you also had them in this PR ;-)\nThus could you please remove them from your PR?\n\n> Actually, if the specializations are added as member functions of SortedRange, then we don't need isSortedRange and lambda comparisons\n\nWhat else was blocking this PR?\n"
  },
  {
    "url": "https://api.github.com/repos/dlang/phobos/issues/comments/215673661",
    "html_url": "https://github.com/dlang/phobos/pull/3534#issuecomment-215673661",
    "issue_url": "https://api.github.com/repos/dlang/phobos/issues/3534",
    "id": 215673661,
    "user": {
      "login": "nordlow",
      "id": 829407,
      "avatar_url": "https://avatars2.githubusercontent.com/u/829407?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nordlow",
      "html_url": "https://github.com/nordlow",
      "followers_url": "https://api.github.com/users/nordlow/followers",
      "following_url": "https://api.github.com/users/nordlow/following{/other_user}",
      "gists_url": "https://api.github.com/users/nordlow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nordlow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nordlow/subscriptions",
      "organizations_url": "https://api.github.com/users/nordlow/orgs",
      "repos_url": "https://api.github.com/users/nordlow/repos",
      "events_url": "https://api.github.com/users/nordlow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nordlow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-29T09:55:54Z",
    "updated_at": "2016-04-29T10:04:32Z",
    "body": "But we still need `SortedRange`-specializations for `{min,max,minmax}Element`, right? The default implementations of them don't care about sortedness (`SortedRange`).\n\nShould these overloads be implemented as free functions take a `SortedRange` as argument or via `SortedRange`-members?\n\nI'll restrict the overloads in this pull to only operate on `SortedRange` with a predicate that matches the predicate of `minElement`.\n"
  },
  {
    "url": "https://api.github.com/repos/dlang/phobos/issues/comments/215688313",
    "html_url": "https://github.com/dlang/phobos/pull/3534#issuecomment-215688313",
    "issue_url": "https://api.github.com/repos/dlang/phobos/issues/3534",
    "id": 215688313,
    "user": {
      "login": "wilzbach",
      "id": 4370550,
      "avatar_url": "https://avatars0.githubusercontent.com/u/4370550?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wilzbach",
      "html_url": "https://github.com/wilzbach",
      "followers_url": "https://api.github.com/users/wilzbach/followers",
      "following_url": "https://api.github.com/users/wilzbach/following{/other_user}",
      "gists_url": "https://api.github.com/users/wilzbach/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wilzbach/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wilzbach/subscriptions",
      "organizations_url": "https://api.github.com/users/wilzbach/orgs",
      "repos_url": "https://api.github.com/users/wilzbach/repos",
      "events_url": "https://api.github.com/users/wilzbach/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wilzbach/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-29T11:27:09Z",
    "updated_at": "2016-04-29T11:27:09Z",
    "body": "> I'll restrict the overloads in this pull to only operate on SortedRange with a predicate that matches the predicate of minElement.\n\n1) Please use `static if` - we should put such details to the implementation. Have a look at the post by [big boss](http://forum.dlang.org/thread/nflotk$1ejk$1@digitalmars.com).\n\n2) You should also have a look at #4257 - it's an \"optimization\" for the default case of an empty lambda.\n\n3) How do you know that the mapping function if given and the sorting pred match? -> imho we can only make the `static if` if no mapping function is used (see 2))\n"
  },
  {
    "url": "https://api.github.com/repos/dlang/phobos/issues/comments/215689497",
    "html_url": "https://github.com/dlang/phobos/pull/3534#issuecomment-215689497",
    "issue_url": "https://api.github.com/repos/dlang/phobos/issues/3534",
    "id": 215689497,
    "user": {
      "login": "sigod",
      "id": 1175750,
      "avatar_url": "https://avatars2.githubusercontent.com/u/1175750?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sigod",
      "html_url": "https://github.com/sigod",
      "followers_url": "https://api.github.com/users/sigod/followers",
      "following_url": "https://api.github.com/users/sigod/following{/other_user}",
      "gists_url": "https://api.github.com/users/sigod/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sigod/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sigod/subscriptions",
      "organizations_url": "https://api.github.com/users/sigod/orgs",
      "repos_url": "https://api.github.com/users/sigod/repos",
      "events_url": "https://api.github.com/users/sigod/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sigod/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-29T11:35:17Z",
    "updated_at": "2016-04-29T11:35:17Z",
    "body": "> Should these overloads be implemented as free functions take a SortedRange as argument or via SortedRange-members?\n\nI vote for `SortedRange`-members. It's easier and cleaner.\n"
  },
  {
    "url": "https://api.github.com/repos/dlang/phobos/issues/comments/215690723",
    "html_url": "https://github.com/dlang/phobos/pull/3534#issuecomment-215690723",
    "issue_url": "https://api.github.com/repos/dlang/phobos/issues/3534",
    "id": 215690723,
    "user": {
      "login": "wilzbach",
      "id": 4370550,
      "avatar_url": "https://avatars0.githubusercontent.com/u/4370550?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wilzbach",
      "html_url": "https://github.com/wilzbach",
      "followers_url": "https://api.github.com/users/wilzbach/followers",
      "following_url": "https://api.github.com/users/wilzbach/following{/other_user}",
      "gists_url": "https://api.github.com/users/wilzbach/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wilzbach/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wilzbach/subscriptions",
      "organizations_url": "https://api.github.com/users/wilzbach/orgs",
      "repos_url": "https://api.github.com/users/wilzbach/repos",
      "events_url": "https://api.github.com/users/wilzbach/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wilzbach/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-29T11:43:30Z",
    "updated_at": "2016-04-29T11:43:30Z",
    "body": "> I vote for SortedRange-members. It's easier and cleaner.\n\nHow do you avoid that SortedRanges match the other template? Won't you have to add something like `!isSortedRange!R`\n"
  },
  {
    "url": "https://api.github.com/repos/dlang/phobos/issues/comments/215693612",
    "html_url": "https://github.com/dlang/phobos/pull/3534#issuecomment-215693612",
    "issue_url": "https://api.github.com/repos/dlang/phobos/issues/3534",
    "id": 215693612,
    "user": {
      "login": "sigod",
      "id": 1175750,
      "avatar_url": "https://avatars2.githubusercontent.com/u/1175750?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sigod",
      "html_url": "https://github.com/sigod",
      "followers_url": "https://api.github.com/users/sigod/followers",
      "following_url": "https://api.github.com/users/sigod/following{/other_user}",
      "gists_url": "https://api.github.com/users/sigod/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sigod/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sigod/subscriptions",
      "organizations_url": "https://api.github.com/users/sigod/orgs",
      "repos_url": "https://api.github.com/users/sigod/repos",
      "events_url": "https://api.github.com/users/sigod/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sigod/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-29T12:01:33Z",
    "updated_at": "2016-04-29T12:01:33Z",
    "body": "> How do you avoid that SortedRanges match the other template?\n\nIt's intended for `SortedRange`-members to \"override\" some of the common templates.\n\n> Won't you have to add something like !isSortedRange!R\n\nI hope not.\n"
  }
]
